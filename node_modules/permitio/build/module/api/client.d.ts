import { AxiosResponse } from 'axios';
import { Logger } from 'winston';
import { IPermitConfig } from '../config';
import { ResourceCreate, ResourceRead, ResourceUpdate, RoleAssignmentCreate, RoleAssignmentRead, RoleAssignmentRemove, RoleCreate, RoleRead, RoleUpdate, TenantCreate, TenantRead, TenantUpdate, UserCreate, UserRead } from '../openapi';
/**
 * This interface contains *read actions* that goes outside
 * of your local network and queries permit.io cloud api.
 * You should be aware that these actions incur some cross-cloud latency.
 */
export interface IReadApis {
    listUsers(): Promise<UserRead[]>;
    getUser(userId: string): Promise<UserRead>;
    getTenant(tenantId: string): Promise<TenantRead>;
    getRole(roleId: string): Promise<RoleRead>;
    getAssignedRoles(user: string, tenant?: string): Promise<RoleAssignmentRead[]>;
}
/**
 * This interface contains *write actions* (or mutations) that manipulate remote
 * state by calling the permit.io api. These api calls goes *outside* your local network.
 * You should be aware that these actions incur some cross-cloud latency.
 */
export interface IWriteApis {
    createUser(user: UserCreate): Promise<[UserRead, boolean]>;
    syncUser(user: UserCreate): Promise<UserRead>;
    deleteUser(userId: string): Promise<AxiosResponse<void>>;
    createTenant(tenant: TenantCreate): Promise<TenantRead>;
    updateTenant(tenantId: string, tenant: TenantUpdate): Promise<TenantRead>;
    deleteTenant(tenantId: string): Promise<AxiosResponse<void>>;
    listTenants(page?: number): Promise<TenantRead[]>;
    createRole(role: RoleCreate): Promise<RoleRead>;
    updateRole(roleId: string, role: RoleUpdate): Promise<RoleRead>;
    deleteRole(roleId: string): Promise<AxiosResponse<void>>;
    assignRole(assignedRole: RoleAssignmentCreate): Promise<RoleAssignmentRead>;
    unassignRole(removedRole: RoleAssignmentRemove): Promise<AxiosResponse<void>>;
    createResource(resource: ResourceCreate): Promise<[ResourceRead, boolean]>;
    updateResource(resourceId: string, resource: ResourceUpdate): Promise<ResourceRead>;
    deleteResource(resourceId: string): Promise<AxiosResponse<void>>;
}
export interface IPermitApi extends IReadApis, IWriteApis {
}
export interface IApiClient {
    api: IPermitApi;
}
export declare class ApiClient implements IReadApis, IWriteApis, IApiClient {
    #private;
    private config;
    private logger;
    private project;
    private environment;
    private scope;
    private users;
    private tenants;
    private roles;
    private roleAssignments;
    private resources;
    constructor(config: IPermitConfig, logger: Logger);
    private getScope;
    listUsers(): Promise<UserRead[]>;
    getUser(userId: string): Promise<UserRead>;
    getTenant(tenantId: string): Promise<TenantRead>;
    listTenants(page?: number): Promise<TenantRead[]>;
    getRole(roleId: string): Promise<RoleRead>;
    getAssignedRoles(user: string, tenant?: string): Promise<RoleAssignmentRead[]>;
    createResource(resource: ResourceCreate): Promise<[ResourceRead, boolean]>;
    updateResource(resourceId: string, resource: ResourceUpdate): Promise<ResourceRead>;
    deleteResource(resourceId: string): Promise<AxiosResponse<void>>;
    createUser(user: UserCreate): Promise<[UserRead, boolean]>;
    syncUser(user: UserCreate): Promise<UserRead>;
    deleteUser(userId: string): Promise<AxiosResponse<void>>;
    createTenant(tenant: TenantCreate): Promise<TenantRead>;
    updateTenant(tenantId: string, tenant: TenantUpdate): Promise<TenantRead>;
    deleteTenant(tenantId: string): Promise<AxiosResponse<void>>;
    createRole(role: RoleCreate): Promise<RoleRead>;
    updateRole(roleId: string, role: RoleUpdate): Promise<RoleRead>;
    deleteRole(roleId: string): Promise<AxiosResponse<void>>;
    assignRole(assignedRole: RoleAssignmentCreate): Promise<RoleAssignmentRead>;
    unassignRole(removedRole: RoleAssignmentRemove): Promise<AxiosResponse<void>>;
    get api(): IPermitApi;
    getMethods(): IApiClient;
}
